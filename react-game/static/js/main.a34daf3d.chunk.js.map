{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","list","id","question","answer","correct","numberquestion","totalcorrect","status","numberQuestion","numberCorrect","index","newCorrect","this","setState","console","log","printQuestion","printAnswer","map","key","className","onClick","checkAnswer","resetQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPA4GeA,G,kBAtGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAK,CACH,CACEC,GAAG,EACHC,SAAS,2CACTC,OAAO,CAAC,QAAQ,QAAQ,OAAO,SAC/BC,QAAQ,SAEV,CACEH,GAAG,EACHC,SAAS,yEACTC,OAAO,CAAC,QAAK,QAAK,WAAM,KACxBC,QAAQ,SAEV,CACEH,GAAG,EACHC,SAAS,uCACTC,OAAO,CAAC,0BAAW,oBAAY,wBAAW,qBAC1CC,QAAQ,qBAEV,CACEH,GAAG,EACHC,SAAS,gHACTC,OAAO,CAAC,2BAAY,gBAAW,cAAW,uBAC1CC,QAAQ,wBAIZC,eAAgB,EAChBC,aAAc,EACdC,OAAQ,CAAC,GAAI,GAAI,GAAI,KAhCN,E,yEAoCPJ,EAAQK,EAAgBC,EAAeC,GACjD,IAAMC,EAAaC,KAAKb,MAAMC,KAAKQ,GAAgBJ,QAE/CI,GAAkB,EAChBG,IAAeR,GACjBK,GAAkB,EAClBC,GAAiB,GAEjBD,GAAkB,EAGpBA,EAAiB,EAEnBI,KAAKC,SAAS,CACZR,eAAgBG,EAChBF,aAAcG,IAEhBK,QAAQC,IAAIL,K,gCAEJF,EAAgBC,GAGxBG,KAAKC,SAAS,CACZR,eAHe,EAIfC,aAHc,M,+BAMR,IAAD,OACDE,EAAiBI,KAAKb,MAAMM,eAC5BI,EAAgBG,KAAKb,MAAMO,aAEjC,GAAIE,GAAkB,EAAG,CACvB,IAAMQ,EAAgBJ,KAAKb,MAAMC,KAAKQ,GAAgBN,SAEhDe,EADaL,KAAKb,MAAMC,KAAKQ,GAAgBL,OACpBe,KAAI,SAACf,EAAQO,GAAT,OACjC,wBAAIS,IAAKT,GACP,wBAAIU,UAAU,OAAOC,QAAS,kBAAM,EAAKC,YAAYnB,EAAQK,EAAgBC,EAAeC,KAC1F,2BAAIP,QAKN,OACE,yBAAKiB,UAAU,OACb,6BACE,oCACA,4BACE,4BAAKJ,GACJC,KAOT,OACE,yBAAKG,UAAU,OACb,iDACA,+DAAgBX,EAAhB,cACA,4BAAQY,QAAS,kBAAM,EAAKE,UAAUf,EAAgBC,KAAtD,wB,GAhGIe,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a34daf3d.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list:[\n        {\n          id:1,\n          question:\"Con kiến nặng mấy cân?\",\n          answer:[\"135kg\",\"135mg\",\"135g\",\"135ng\"],\n          correct:\"135mg\"\n        },\n        {\n          id:2,\n          question:\"Điền vào chỗ trống: Gáy sớm ăn ...\",\n          answer:[\"mì\",\"gì\",\"cơm\",\"L\"],\n          correct:\"gì\"\n        },\n        {\n          id:3,\n          question:\"Quần gì nhiều nhất\",\n          answer:[\"Quần đảo\",\"Quần hùng\",\"Quần đùi\",\"Quần chíp\"],\n          correct:\"Quần chíp\"\n        },\n        {\n          id:4,\n          question:\"Con nào khi nối liền lại với nhau thì có độ dài lớn nhất?\",\n          answer:[\"Con đường\",\"Con kiến\",\"Con sông\",\"Con người\"],\n          correct:\"Con người\"\n        }\n      ],\n      \n      numberquestion: 0,\n      totalcorrect: 1,\n      status: ['', '', '', '']\n     \n    };\n  }\n  checkAnswer(answer, numberQuestion, numberCorrect, index) {\n    const newCorrect = this.state.list[numberQuestion].correct;\n    \n    if (numberQuestion <= 4) {\n      if (newCorrect === answer) {\n        numberQuestion += 1;\n        numberCorrect += 1;\n      } else {\n        numberQuestion += 1;\n      }\n    } else {\n      numberQuestion = 5\n    }\n    this.setState({\n      numberquestion: numberQuestion,\n      totalcorrect: numberCorrect,\n    })\n    console.log(index)\n  }\n  resetQuiz(numberQuestion, numberCorrect) {\n    numberQuestion = 0;\n    numberCorrect = 0;\n    this.setState({\n      numberquestion: numberQuestion,\n      totalcorrect: numberCorrect\n    })\n  }\n  render() {\n    const numberQuestion = this.state.numberquestion;\n    const numberCorrect = this.state.totalcorrect;\n    \n    if (numberQuestion <= 4) {\n      const printQuestion = this.state.list[numberQuestion].question;\n      const listAnwers = this.state.list[numberQuestion].answer;\n      const printAnswer = listAnwers.map((answer, index) =>\n        <li key={index}>\n          <h3 className=\"exit\" onClick={() => this.checkAnswer(answer, numberQuestion, numberCorrect, index)}>\n            <p>{answer}</p>\n           \n            </h3>\n          </li>\n          )\n          return (\n            <div className=\"App\">\n              <div>\n                <h1>Quiz</h1>\n                <ul>\n                  <h2>{printQuestion}</h2>\n                  {printAnswer}\n                </ul>\n                \n              </div>\n            </div>\n          );\n        } else {\n          return (\n            <div className=\"App\">\n              <h1>Chúc Mừng</h1>\n              <p>Bạn đã đúng {numberCorrect} /5 câu</p>\n              <button onClick={() => this.resetQuiz(numberQuestion, numberCorrect)}>Làm lại</button>\n            </div>\n          )\n        }\n      }\n    }\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}